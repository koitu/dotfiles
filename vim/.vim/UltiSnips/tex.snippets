# to toggle compiling for a doc do :VimtexCompile (or type \ll in normal mode) and then zathura will pop up and every :w you do will update it

# i - inline word (activate snippet even when in other word)
# w - suppress i when pattern could be part of some word
# A - automatically activate without tabbing

snippet preamble "weekly document preamble"
\documentclass[11pt]{article}

\input{../4A_preamble}

% set graphics path
\graphicspath{ {./} }

\begin{document}
$0
\end{document}
endsnippet

# replace with text
snippet sign "Signature"
Yours sincerely,

Andrew Wang
endsnippet

# replace with output of bash '...'
snippet date "Date"
`date +%F`
endsnippet

# replace with output of python '!p ...'
snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet bf "textbf" i
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet tx "textbf" i
\text{${1:${VISUAL}}}$0
endsnippet

snippet em "emph" wi
\emph{${1:${VISUAL}}}$0
endsnippet

snippet ls "lstinline" i
\lstinline{${1:${VISUAL}}}$0
endsnippet

# use widebars instead
# snippet ol "overline" wi
# \overline{${1:${VISUAL}}}$0
# endsnippet

snippet wb "widebar" wi
\widebar{${1:${VISUAL}}}$0
endsnippet

snippet ul "underline" wi
\underline{${1:${VISUAL}}}$0
endsnippet


snippet bb "mathbb" i
\mathbb{${1:${VISUAL}}}$0
endsnippet

snippet cl "mathcal" i
\mathcal{${1:${VISUAL}}}$0
endsnippet

snippet ub "overbrace" wi
\underbrace{${1:${VISUAL}}}_{$2}$0
endsnippet

snippet ob "overbrace" wi
\overbrace{${1:${VISUAL}}}^{$2}$0
endsnippet

snippet def "definition" 
\textbf{Definition}: $0
endsnippet

snippet thm "Theorem" 
\textbf{Theorem}: $0
endsnippet

snippet thmm "Theorem" 
\textbf{Theorem} (\emph{$1}): $0
endsnippet

# enable this to allow spell check and ctrl-L to autocorrect
# setlocal spell
# set spelllang=nl,en_gb
# inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

# context("math") calls this global to endglobal to only allow autocomplete when in inline or multiline math (to avoid the autofill when typing words in english and dutch)

# global !p
# texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
# 
# texIgnoreMathZones = ['texMathText']
# 
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
# 
# ignore = texIgnoreMathZoneIds[0]
# 
# def math():
# 	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
# 	try:
# 		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
# 		return first != ignore
# 	except StopIteration:
# 		return False
# endglobal
# 
# snippet template "Basic template" b
# \documentclass[12pt, letterpaper]{article}
# 
# \usepackage[utf8]{inputenc}
# \usepackage[T1]{fontenc}
# \usepackage{textcomp}
# \usepackage[dutch]{babel}
# \usepackage{amsmath, amssymb}
# 
# 
# % figure support
# \usepackage{import}
# \usepackage{xifthen}
# \pdfminorversion=7
# \usepackage{pdfpages}
# \usepackage{transparent}
# \newcommand{\incfig}[1]{%
# 	\def\svgwidth{\columnwidth}
# 	\import{./figures/}{#1.pdf_tex}
# }
# 
# \pdfsuppresswarningpagegroup=1
# 
# \begin{document}
# 	$0
# \end{document}
# endsnippet
# 

snippet begin "begin{} / end{}" 
\\begin{$1}
${0:${VISUAL}}
\\end{$1}
endsnippet

snippet center "center"
\\begin{center}
	${1:${VISUAL}}$0
\\end{center}
endsnippet

snippet tabu "create a table"
\\begin{tabu}{$1}
	$0
\\end{tabu}
endsnippet

snippet minipage "create a minipage"
\\begin{minipage}[c]{$1\\textwidth}
	${0:${VISUAL}}
\\end{minipage}
endsnippet

snippet bmat "bmatrix" wi
\begin{bmatrix}
	${1:${VISUAL}}
\end{bmatrix}
$0
endsnippet

snippet mat "matrix" wi
\begin{matrix}
	${1:${VISUAL}}
\end{matrix}
$0
endsnippet

snippet samepage "samepage block" wi
\begin{samepage}
${1:${VISUAL}}
\end{samepage}
$0
endsnippet

# priority 100
# snippet ... "ldots" iA
# \ldots
# endsnippet
# 
# snippet table "Table environment" b
# \begin{table}[${1:htpb}]
# 	\centering
# 	\caption{${2:caption}}
# 	\label{tab:${3:label}}
# 	\begin{tabular}{${5:c}}
# 	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
# 	\end{tabular}
# \end{table}
# endsnippet
# 
# snippet fig "Figure environment" b
# \begin{figure}[${1:htpb}]
# 	\centering
# 	${2:\includegraphics[width=0.8\textwidth]{$3}}
# 	\caption{${4:$3}}
# 	\label{fig:${5:${3/\W+/-/g}}}
# \end{figure}
# endsnippet

snippet graphic "include graphic"
\begin{center}
	\includegraphics[width=$1\textwidth]{$2}$0
\end{center}
endsnippet

snippet lst "lstlisting"
\begin{lstlisting}
${0:${VISUAL}}
\end{lstlisting}
endsnippet

snippet algo "algorithm"
\begin{algorithm}
	\caption{$1}
	\begin{algorithmic}
	${0:${VISUAL}}
	\end{algorithmic}
\end{algorithm}
endsnippet

snippet alg "algorithm"
\begin{algorithmic}
${0:${VISUAL}}
\end{algorithmic}
endsnippet

# snippet enum "Enumerate" bA
snippet enum "Enumerate"
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

# need to make this one higher priority than em -> \emph{}
# snippet item "Itemize" bA
priority 1000
snippet item "Itemize" 
\begin{itemize}
	\item ${0:${VISUAL}}
\end{itemize}
endsnippet

snippet sec "section"
\section{${1:${VISUAL}}}
$0
endsnippet

snippet ssec "subsection"
\subsection{${1:${VISUAL}}}
$0
endsnippet

snippet sssec "subsubsection"
\subsubsection{${1:${VISUAL}}}
$0
endsnippet

# snippet desc "Description" b
# \begin{description}
# 	\item[$1] $0
# \end{description}
# endsnippet
# 
# snippet pac "Package" b
# \usepackage[${1:options}]{${2:package}}$0
# endsnippet
# 
# snippet => "implies" Ai
# \implies
# endsnippet
# 
# snippet =< "implied by" Ai
# \impliedby
# endsnippet
# 
# context "math()"
# snippet iff "iff" Ai
# \iff
# endsnippet
# 
# snippet il "InLine math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
# 	snip.rv = ' '
# else:
# 	snip.rv = ''
# `$2
# endsnippet
# 
# snippet ml "MultiLine math" wA
# \[
# ${1:${VISUAL}}
# .\] $0
# endsnippet

# snippet ali "Align" bA
# \begin{align*}
# 	${1:${VISUAL}}
# .\end{align*}
# endsnippet

snippet ali "Align"
\begin{align*}
	${0:${VISUAL}}
\end{align*}
endsnippet


# context "math()"
# snippet frac "Fraction" iA
priority 1000
snippet frac "Fraction" i
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

# snippet frac "Fraction" iA
priority 10000
snippet tfrac "Fraction" i
\\tfrac{${1:${VISUAL}}}{$2}$0
endsnippet

snippet / "Convert highlighted to fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Convert divides to fraction" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet
# 
# priority 1000
# context "math()"
# snippet '^.*\)/' "Convert divition with lots of brackets to fraction" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
# 	if stripped[i] == ')': depth += 1
# 	if stripped[i] == '(': depth -= 1
# 	if depth == 0: break;
# 	i-=1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet
# 
# # context "math()"
# # snippet '([A-Za-z])(\d)' "auto subscript for 1 number" wrA
# # `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
# # endsnippet
# # 
# # context "math()"
# # snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
# # `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
# # endsnippet
# # the sub/superscript snippets are below
# 
# 
# snippet sympy "sympyblock " w
# sympy $1 sympy$0
# endsnippet
# 
# priority 10000
# snippet 'sympy(.*)sympy' "sympy" wr
# `!p
# from sympy import *
# x, y, z, t = symbols('x y z t')
# k, m, n = symbols('k m n', integer=True)
# f, g, h = symbols('f g h', cls=Function)
# init_printing()
# snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
# `
# endsnippet
# 
# priority 1000
# snippet math "mathematicablock" w
# math $1 math$0
# endsnippet
# 
# priority 10000
# snippet 'math(.*)math' "math" wr
# `!p
# import subprocess
# code = match.group(1)
# code = 'ToString[' + code + ', TeXForm]'
# snip.rv = subprocess.check_output(['wolframscript', '-code', code])
# `
# endsnippet
# 
# snippet == "equals" iA
# &= $1 \\\\
# endsnippet
# 
# snippet != "not equal" iA
# \neq 
# endsnippet

snippet ceil "ceil" i
\lceil ${1:${VISUAL}} \rceil$0
endsnippet

snippet floor "floor" i
\lfloor ${1:${VISUAL}} \rfloor$0
endsnippet

snippet angle "angle" i
\langle ${1:${VISUAL}} \rangle$0
endsnippet


snippet lrceil "left right ceil" i
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

snippet lrfloor "left right floor" i
\left\lfloor ${1:${VISUAL}} \right\rfloor $0
endsnippet

snippet lrangle "left right angle" i
\left\langle ${1:${VISUAL}} \right\rangle $0
endsnippet

# snippet pmat "pmat" iA
# \begin{pmatrix} $1 \end{pmatrix} $0
# endsnippet
# 
# snippet bmat "bmat" iA
# \begin{bmatrix} $1 \end{bmatrix} $0
# endsnippet
# 
# context "math()"
# snippet () "left( right)" iA
# \left( ${1:${VISUAL}} \right) $0
# endsnippet
# 
# snippet lr "left( right)" i
# \left( ${1:${VISUAL}} \right) $0
# endsnippet
# 
# snippet lr( "left( right)" i
# \left( ${1:${VISUAL}} \right) $0
# endsnippet
# 
# snippet lr| "left| right|" i
# \left| ${1:${VISUAL}} \right| $0
# endsnippet
# 
# snippet lr{ "left\{ right\}" i
# \left\\{ ${1:${VISUAL}} \right\\} $0
# endsnippet
# 
# snippet lrb "left\{ right\}" i
# \left\\{ ${1:${VISUAL}} \right\\} $0
# endsnippet
# 
# snippet lr[ "left[ right]" i
# \left[ ${1:${VISUAL}} \right] $0
# endsnippet
# 
# snippet lra "leftangle rightangle" iA
# \left<${1:${VISUAL}} \right>$0
# endsnippet

# context "math()"
# snippet conj "conjugate" iA
# \overline{$1}$0
# endsnippet

# snippet sum "sum" w
# \sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
# endsnippet
# 
# snippet taylor "taylor" w
# \sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
# endsnippet
# 
# snippet lim "limit" w
# \lim_{${1:n} \to ${2:\infty}} 
# endsnippet
# 
# snippet limsup "limsup" w
# \limsup_{${1:n} \to ${2:\infty}} 
# endsnippet
# 
# snippet prod "product" w
# \prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet part "d/dx" w
\frac{\partial $1}{\partial $2} $0
endsnippet

# context "math()"
# # snippet sq "\sqrt{}" iA
# snippet sq "\sqrt{}" i
# \sqrt{${1:${VISUAL}}} $0
# endsnippet
# 
# context "math()"
# snippet sr "^2" iA
# ^2
# endsnippet
# 
# context "math()"
# snippet cb "^3" iA
# ^3
# endsnippet
# 
# context "math()"
# # snippet td "SuPerscript" iA
# snippet sp "SuPerscript" iA
# ^{$1}$0
# endsnippet
# 
# # context "math()"
# # snippet rd "to the ... power" iA
# # ^{($1)}$0
# # endsnippet
# 
# context "math()"
# # snippet __ "SuBscript" iA
# snippet sb "SuBscript" iA
# _{$1}$0
# endsnippet
# 
# snippet inf "Infinity" iA
# \infty
# endsnippet
# 
# snippet rij "mrij" i
# (${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
# endsnippet
# 
# snippet <= "less than or equal" iA
# \le 
# endsnippet
# 
# snippet >= "greater than or equal" iA
# \ge 
# endsnippet
# 
# context "math()"
# snippet EE "there exists" iA
# \exists 
# endsnippet
# 
# context "math()"
# snippet AA "for all" iA
# \forall 
# endsnippet
# 
# context "math()"
# snippet xnn "xn" iA
# x_{n}
# endsnippet
# 
# context "math()"
# snippet ynn "yn" iA
# y_{n}
# endsnippet
# 
# 
# context "math()"
# snippet xii "xi" iA
# x_{i}
# endsnippet
# 
# context "math()"
# snippet yii "yi" iA
# y_{i}
# endsnippet
# 
# context "math()"
# snippet xjj "xj" iA
# x_{j}
# endsnippet
# 
# context "math()"
# snippet yjj "yj" iA
# y_{j}
# endsnippet
# 
# context "math()"
# snippet xp1 "x" iA
# x_{n+1}
# endsnippet
# 
# context "math()"
# snippet xmm "x" iA
# x_{m}
# endsnippet
# 
# snippet R0+ "R0+" iA
# \\R_0^+
# endsnippet
# 
# snippet plot "Plot" w
# \begin{figure}[$1]
# 	\centering
# 	\begin{tikzpicture}
# 		\begin{axis}[
# 			xmin= ${2:-10}, xmax= ${3:10},
# 			ymin= ${4:-10}, ymax = ${5:10},
# 			axis lines = middle,
# 		]
# 			\addplot[domain=$2:$3, samples=${6:100}]{$7};
# 		\end{axis}
# 	\end{tikzpicture}
# 	\caption{$8}
# 	\label{${9:$8}}
# \end{figure}
# endsnippet
# 
# snippet nn "Tikz node" w
# \node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
# $0
# endsnippet
# 
# context "math()"
# snippet mcal "mathcal" iA
# \mathcal{$1}$0
# endsnippet
# 
# snippet lll "l" iA
# \ell
# endsnippet
# 
# context "math()"
# snippet nabl "nabla" iA
# \nabla 
# endsnippet
# 
# context "math()"
# snippet xx "cross" iA
# \times 
# endsnippet
# 
# priority 100
# snippet ** "cdot" iA
# \cdot 
# endsnippet
# 
# context "math()"
# snippet norm "norm" iA
# \|$1\|$0
# endsnippet
# 
# priority 100
# context "math()"
# snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
# \\`!p snip.rv = match.group(1)`
# endsnippet
# 
# priority 300
# context "math()"
# snippet dint "integral" wA
# \int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
# endsnippet
# 
# priority 200
# context "math()"
# snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
# \\`!p snip.rv = match.group(1)`
# endsnippet
# 
# 
# priority 100
# context "math()"
# snippet -> "to" iA
# \to 
# endsnippet
# 
# priority 200
# context "math()"
# snippet <-> "leftrightarrow" iA
# \leftrightarrow
# endsnippet
# 
# context "math()"
# snippet !> "mapsto" iA
# \mapsto 
# endsnippet
# 
# context "math()"
# snippet invs "inverse" iA
# ^{-1}
# endsnippet
# 
# context "math()"
# snippet compl "complement" iA
# ^{c}
# endsnippet
# 
# context "math()"
# snippet \\\ "setminus" iA
# \setminus
# endsnippet
# 
# snippet >> ">>" iA
# \gg
# endsnippet
# 
# snippet << "<<" iA
# \ll
# endsnippet
# 
# 
# snippet ~~ "~" iA
# \sim 
# endsnippet
# 
# context "math()"
# snippet set "set" wA
# \\{$1\\} $0
# endsnippet
# 
# snippet || "mid" iA
#  \mid 
# endsnippet
# 
# 
# context "math()"
# snippet cc "subset" Ai
# \subset 
# endsnippet
# 
# snippet notin "not in " iA
# \not\in 
# endsnippet
# 
# context "math()"
# snippet inn "in " iA
# \in 
# endsnippet
# 
# snippet NN "Natural?" iA
# \N
# endsnippet
# 
# snippet Nn "cap" iA
# \cap 
# endsnippet
# 
# snippet UU "cup" iA
# \cup 
# endsnippet
# 
# snippet uuu "bigcup" iA
# \bigcup_{${1:i \in ${2: I}}} $0
# endsnippet
# 
# snippet nnn "bigcap" iA
# \bigcap_{${1:i \in ${2: I}}} $0
# endsnippet
# 
# snippet OO "emptyset" iA
# \O
# endsnippet
# 
# snippet RR "Real" iA
# \R
# endsnippet
# 
# snippet QQ "Rational" iA
# \Q
# endsnippet
# 
# snippet ZZ "Integers" iA
# \Z
# endsnippet
# 
# snippet <! "normal" iA
# \triangleleft 
# endsnippet
# 
# snippet <> "hokje" iA
# \diamond 
# endsnippet
# 
# 
# context "math()"
# snippet '(?<!i)sts' "text subscript" irA
# _\text{$1} $0
# endsnippet
# 
# context "math()"
# snippet tt "text" iA
# \text{$1}$0
# endsnippet

# context "math()"
#snippet case "cases" wA
snippet case "cases" i
\begin{cases}
	$1
\end{cases}
endsnippet

# snippet SI "SI" iA
# \SI{$1}{$2}
# endsnippet
# 
# snippet bigfun "Big function" iA
# \begin{align*}
# 	$1: $2 &\longrightarrow $3 \\\\
# 	$4 &\longmapsto $1($4) = $0
# .\end{align*}
# endsnippet
# 
# snippet cvec "column vector" iA
# \begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
# endsnippet
# 
# priority 10
# context "math()"
# snippet "bar" "bar" riA
# \overline{$1}$0
# endsnippet
# 
# priority 100
# context "math()"
# snippet "([a-zA-Z])bar" "bar" riA
# \overline{`!p snip.rv=match.group(1)`}
# endsnippet
# 
# priority 10
# context "math()"
# snippet "hat" "hat" riA
# \hat{$1}$0
# endsnippet
# 
# priority 100
# context "math()"
# snippet "([a-zA-Z])hat" "hat" riA
# \hat{`!p snip.rv=match.group(1)`}
# endsnippet
# 
# snippet letw "let omega" iA
# Let $\Omega \subset \C$ be open.
# endsnippet
# 
# 
# snippet HH "H" iA
# \mathbb{H}
# endsnippet
# 
# snippet DD "D" iA
# \mathbb{D}
# endsnippet
# 
# # vim:ft=snippets
